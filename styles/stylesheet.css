/* 
First, a disclaimer.
This may not be exclusively responsive design.
Responsive design relies on changing our design patterns to fit the screen size.

I may also include elements of adaptive design, also known as progressive enhancement, where it makes sense.
This involves having the site detect available space, and then selecting the most appropriate design for that space.
Resizing the browser window would then have no effect on the design.

Why would we want this?
Adaptive design is useful for mobile devices, and allows us to customize our design beyond what is possible with responsive design.
*/

/*
Before writing any CSS, we need to decide on some basic principles.

First, which units should we use?
I'm going to be using relative units, such as em and rem, as they scale to their container.
This is in contrast to absolute units, such as px.
Absolute units are fixed, meaning they cause issues when our display size or pixel density changes.

Second, the importance of "flow".
As screen sizes get smaller, our content will take up more vertical space.
We need to be able to push our content down the page, and not have it overlap with other elements.

Third, breakpoints.
We need our layout to change at predictable points.
Such as having 1 column on mobile, 2 columns on tablet, and 3 columns on desktop.
Breakpoints should be used with caution, as they can make it difficult to understand what they influence.

Fourth, maximum and minimum values.
While we want our content to all available space on mobile,
we don't want it to take up the entire screen on desktop.
As this can make long paragraphs of text uncomfortable to read.

Fifth, nesting.
It will be difficult to remember how all of our elements interact with each other.
Grouping them into containers will keep pages easier to control.

Sixth, webfonts versus system fonts.
Webfonts are nice, but they can be slow to load.
System fonts are fast, but they have a limited selection of fonts.
I'll make limited use of webfonts, and will use system fonts for the rest.

Finally, when to use bitmap images and vectors.
Bitmap images are pixel-based, and are best for photographs.
Vectors are resolution-independent, and are best for icons and logos.

Both types have important considerations.
For bitmap images, we need to optimize them for the web.
This involves resizing them to the appropriate size, and compressing them.
For vectors, we need to remember that some older browsers don't support them.
Complicated vectors may also be slow to load.
*/

/*
How should CSS be organized?
There are principles we need to consider.

First, CSS is a cascade.
This means that the last CSS rule to be applied will be the one that is used.
As a result, we need to put more general rules at the top, and more specific rules at the bottom.

Second is the DRY principle.
Don't Repeat Yourself.
We need to avoid what's known as "cascading specificity".
This is where we have multiple rules that are all applied to the same element.
This can cause confusion, and make it difficult to understand what is happening.
*/

@font-face {
	font-family: 'Mona Sans';
	src:
		url('/fonts/Mona-Sans.woff2') format('woff2 supports variations'),
		url('/fonts/Mona-Sans.woff2') format('woff2-variations');

	/* Fallback for Safari 14.0 and below */
	@supports not (font-variation-settings: normal) {
		font-weight: 200 900;
		font-stretch: 75% 125%;
	}
}

@font-face {
	font-family: 'Hubot Sans';
	src:
		url('/fonts/Hubot-Sans.woff2') format('woff2 supports variations'),
		url('/fonts/Hubot-Sans.woff2') format('woff2-variations');
	font-weight: 200 900;
	font-stretch: 75% 125%;

	@supports not (font-variation-settings: normal) {
		font-weight: 200 900;
		font-stretch: 75% 125%;
	}
}

/* CSS colour variables */
:root {
	--primary: #1d1d24;
	--accent: #fdeb47;
	--secondary: #6171ff;
	--tertiary: #ffffff;
	--text: #ffffff;
	--text-secondary: #1d1d24;
}

/* All elements */
* {
	/* Ensures that the web page fills the entire viewport */
	margin: 0;
	padding: 0;
	/* Includes the padding and border in the width and height of elements. */
	box-sizing: border-box;
	/* Sets the default font for the webpage. */
	font-family: 'Mona Sans';
	/* Makes sure that content always fits horizontally */
} 

body {
	background: var(--primary);
}

/* Links */
a {
	/* Removes the underline from link */
	text-decoration: none;
}

nav {
	/* Spread the nav's content across the page horizontally */
	display: flex;
	justify-content: space-between;
	/* Ensure there's a small gap between items */
	padding: 1.875rem 6.25rem;
	align-items: center;
}

nav ul li {
	list-style: none;
	display: inline-block;
	padding: 0.625rem 1.25rem;
}

nav ul li a {
	color: var(--text);
	position: relative;
	padding: 0.3125rem 0;
}

/* Make the active link coloured */
nav ul li a.active {
	color: var(--accent);
}

nav ul li a:hover {
	color: var(--accent);
}

/* This is to make an animation on hovering over a link */
nav ul li a:after {
	/* Empty generated content is added to the css */
	content: "";
	position: absolute;
	left: 0;
	width: 0;
	/* The empty generated content is made to be 3px tall */
	height: 0.1875rem;
	/* Make the background of the generated content yellow */
	background: var(--accent);
	/* The time it takes for the animation to play over */
	transition: 0.3s;
	bottom: 0;
}

nav ul li a:hover:after {
	/* On hover, widen the content */
	width: 100%;
}

/* The primary content of the web page. */
.hero {
	width: 100%;
	height: 100vh;
	background: url(images/..jpg);
	background-size: cover;
}

.logo {
	/* Ensures the logo is large enough to be seen on mobile */
	max-height: 3.75em;
	/* Makes the logo white */
	filter: brightness(0) invert(1);
}


button, .btn {
	font-family: 'Hubot Sans';
	color: var(--text-secondary);
	text-transform: uppercase;
	letter-spacing: 0.125rem;
	padding: 1.25rem 2.5rem;
	/* Updated padding to put the item in the middle of the button */
	border-radius: 2rem;
	display: inline-block;
	font-weight: 500;
	transition: all 0.4s ease-in-out;
	background: var(--accent);
	border: 0.125rem solid var(--accent);
	/* Buttons need to stay a constant aspect ratio */
	min-height: 4rem;
	max-height: 4rem;
}

/* On hover, make the button's background the primary colour, and make it's text and border the accent colour */
button:hover, .btn:hover {
	background: var(--primary);
	border-color: var(--accent);
	color: var(--accent);
}

button, .btn, .btn:hover, nav ul li{
	/* We don't want the user to accidentally select the text on a button when they're trying to click it.
	
	
	-webkit-touch-callout removes the callout information when a target is held on iOS.
	It is non-standard, and the only browser that supports it is Safari on iOS.
	It may be worth removing this for accessibility reasons, but currently it is the only way to remove the callout information on iOS.
	In my testing it has been reliable, but I would like to test it on more devices.*/
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

header {
	position: relative;
	top: 15%;
	/* Left padding */
	padding-left: 6.25rem;
	/* This will make the header's width the width of its content */
	display: inline-block;
}

header h1 {
	font-family: 'Hubot Sans';
	color: var(--text);
	font-size: 6vw;
	font-weight: 700;
	line-height: 1;
	text-transform: inherit;
	width: 70%;
}

header span {
	color: var(--accent);
}

header p {
	width: 55%;
	color: var(--text);
	margin-top: 1.5625rem;
	margin-bottom: 1.5rem;
}

header p a {
	color: var(--accent);
}

.card-box {
	display: flex;
	flex-wrap: wrap;
	/* Align item to the middle of the flexbox */
	justify-content: space-between;
	/* Keep cards closer together */
	padding: 0 5.25rem;
	/* Move the content down so that it's below the heading */
	margin-top: 1.75rem;
}

/* The card-box leaves blank space to the right. This removes that issue */

.card {
	/* White background  */
	background: var(--tertiary);
	/* Rounded corners */
	border-radius: 1em;
	/* Small gap between the card and the content */
	padding: 1.25rem;
	padding-bottom: 0%;
	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
	/* TODO: setting max-width with em feels clunky. Find a better way to do this */
	max-width: 23em;
	max-height: fit-content;
	min-height: 38.5em;
	margin-bottom: 2rem;
	margin-left: auto;
	margin-right: auto;
}

/* Make the cards all the same size, regardless of if they have content or not */

.card p {
	/* Make the text black */
	color: var(--text-secondary);
	/* Put the text in the middle of the card */
	text-align: center;
	/* Make th text take the entire width of the card */
	width: 100%;
	margin-bottom: 2.5rem;
}

.card h2 {
	/* Make the text black */
	color: var(--text-secondary);
	/* Put the text in the middle of the card */
	text-align: center;
	/* Make the text take the entire width of the card */
	width: 100%;
}

.card img {
	/* Set the image to cover and keep them the same size*/
	object-fit: cover;
	width: 100%;
	height: 60%;
	max-width: fit-content;
	/* Round the corner of the image */
	border-radius: 1em;
	/* Make the image a square */
	aspect-ratio: 1/1;
	/* Put the image in the middle of the card */
	display: block;
	margin-left: auto;
	margin-right: auto;
	/* Put space below the image */
	margin-bottom: 20px;
	margin-bottom: 2rem;
}

/* Styling for a form input field */
input {
	border: none;
	/* Round the border */
	border-radius: 0.5rem;
	border-bottom: 0.125rem solid var(--text-secondary);
	padding: 0.5rem;
	color: var(--text-secondary);
	width: 100%;
	display: block;
	text-align: center;
	margin-bottom: 1.25rem;
	/* Remove the highlight when you click on it */
	outline: none;
}

footer {
	/* Put the footer at the bottom of the page */
	position: relative;
	bottom: 0;
	/* Make the footer the same width as the page */
	width: 100%;
	/* Make the footer the same height as the nav bar */
	height: 4rem;
	/* Make the footer the same colour as the nav bar */
	background: var(--primary);
}

footer p {
	/* Make the text white */
	color: var(--text);
	/* Put the text in the middle of the footer */
	text-align: center;
	/* Put the text on a new line */
	display: block;
	margin-top: 1.25rem;
}

footer p a {
	/* Make the text white */
	color: var(--text);
}

footer p a:hover {
	/* On hover, make the text the accent colour */
	color: var(--accent);
}

footer p a:active {
	/* On active, make the text the accent colour */
	color: var(--accent);
}

/* The media queries for mobile */
@media only screen and (max-width: 800px) {
	/* The nav bar */
	nav {
		/* Remove the nav bar's background */
		background: none;
	}

	nav ul {
		/* Remove the nav bar's background */
		background: none;
	}

	nav ul li a {
		/* Make the text white */
		color: var(--text);
		/* Make the text the same size as the desktop version */
		font-size: 1.125rem;
	}

	nav ul li a:hover {
		/* On hover, make the text the accent colour */
		color: var(--accent);
	}

	nav ul li a:hover:after {
		/* On hover, make the text the accent colour */
		background-color: var(--accent);
	}

	/* The logo */
	.logo {
		/* Make the logo white */
		filter: brightness(0) invert(1);
	}

	/* The header */
	header {
		/* Remove the left padding */
		padding-left: 0;
	}

	header h1 {
		/* Make the text the same size as the desktop version */
		font-size: 4.5rem;
	}

	header p {
		/* Make the text the same size as the desktop version */
		font-size: 1.25rem;
	}
}

@media screen and (max-width: 960px) {
	.logo, nav .btn {
		display: none;
	}

	nav, nav ul {
		background-color: var(--accent);
	}

	nav ul li a {
		color: var(--text-secondary);
	}

	nav ul li a.active{
		color: var(--text-secondary);
	}

	/* Put a black line under the active link */
	nav ul li a.active::after {
		content: '';
		display: block;
		width: 100%;
		height: 0.125rem;
		background-color: var(--text-secondary);

		/* On multiline text, this should be at the very bottom */
		bottom: 0;
		/* The line should be under the text */
		position: relative;
	}

	nav ul {
		text-align: center;
		transition: 0.3s;
	}
	nav ul, header {
		display: flex;
		flex-direction: column;
		position: relative;
		width: 100%;
	}

	.card-box {
		padding: 0;
		margin: 0;
	}

	header {
		padding-top: 2rem;
		padding-left: 0%;
		text-align: center;
		/* Align to the middle */
		align-items: center;
		top: 0;
	}

	header h1 {
		font-size: 6vw;
	}

	.btn:hover, button:hover {
		/* Do nothing on hover */
		background: var(--accent);
		border-color: var(--primary);
		color: var(--primary);
	}

	nav ul li a:hover:after {
		/* On hover, widen the content */
		width: 0%;
	}

	/* A small amount of padding for the footer */
	footer {
		padding: 0.5rem;
	}
}
