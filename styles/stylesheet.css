/*
The @font-face rule allows me to use a font that is not installed on the user's computer.
I just need to specify the font's name, the path to the font file, and the font's format.
 */
@font-face {
    font-family  : "Mona Sans";
    /*
    The supports variations part is optional.
    It is only required when the font file does not contain "wght" and "wdth" axes
    */
    src          : url("/fonts/Mona-Sans.woff2") format("woff2 supports variations"),
    url("/fonts/Mona-Sans.woff2") format("woff2-variations");
    /* The font supports weights from 200 to 900 */
    font-weight  : 200 900;
    /*  The fonts supports widths between 75% and 125% */
    font-stretch : 75% 125%;
}

@font-face {
    font-family  : "Hubot Sans";
    src          : url("/fonts/Hubot-Sans.woff2") format("woff2 supports variations"),
    url("/fonts/Hubot-Sans.woff2") format("woff2-variations");
    font-weight  : 200 900;
    font-stretch : 75% 125%;
}

/*
Variables are declared using the :root pseudo-class.
I've used this only for colours, but it could be used for any CSS property.

Not all of these colours are used in this stylesheet, but I've included them to aid future development.
*/

:root {
    --accent         : #FDEB47;
    --primary        : #1D1D24;
    --secondary      : #6171FF;
    --tertiary       : #FFFFFF;
    --text           : #FFFFFF;
    --text-secondary : #1D1D24;
}

/* The asterisk selector is a wild-card that means all elements.*/
* {
    /*
    The box-sizing property is used to define how the width and height of an element are calculated.
    The border-box value is used so that the width and height properties include the padding and border.
    */
    box-sizing  : border-box;
    font-family : "Mona Sans", sans-serif;
    margin      : 0;
    padding     : 0;

}

body {
    background : var(--primary);
}


a {
    /* Remove the underline from links*/
    text-decoration : none;
}

nav {
    align-items     : center;
    display         : flex;
    justify-content : space-between;
    padding         : 1.875rem 6.25rem;
}

nav ul li {
    /*
    The display property is used to define the type of box an element generates.
    The inline-block value is used to display the element as an inline box, but allowing the width and height properties to be used.
    */
    display    : inline-block;
    /*
    The list-style property is used to remove the bullet points from the list.
    */
    list-style : none;
    padding    : 0.625rem 1.25rem;
}

nav ul li a {
    color    : var(--text);
    padding  : 0.3125rem 0;
    /*
    The position property is used to define the type of positioning method used for an element.
    The relative value is used to position the element relative to its normal position.
   */
    position : relative;
}


nav ul li a.active {
    color : var(--accent);
}

/* The hover pseudo-class controls styling applied when the mouse hovers over an element*/
nav ul li a:hover {
    color : var(--accent);
}

/*
The after pseudo-class inserts content after an element.
I've used it alongside the :hover:after pseudo-class to create a line that appears under the link when the mouse hovers over it.
This is done by setting the content property to an empty string, and then setting the width and height properties.
On hover, the width property is set to 100% to make the line appear.
*/
nav ul li a:after {
    background : var(--accent);
    bottom     : 0;
    content    : "";
    height     : 0.1875rem;
    left       : 0;
    position   : absolute;
    transition : 0.3s;
    width      : 0;
}

nav ul li a:hover:after {
    width : 100%;
}

/*
The hero class controls the banner of the website
I've included the background-size property for if I want to use a background image in the future.
*/
.hero {
    background-size : cover;
    height          : 100vh;
    width           : 100%;
}

/*
The logo class controls the logo in the top left of the website.
*/
.logo {
    /*
    The filter property dynamically edits an image.
    I've used it to make the logo white, so that it stands out against the dark background.
    I've done this in the stylesheet so that I can change the logo if I want to, without having to edit it.
    */
    filter     : brightness(0) invert(1);
    max-height : 3.75em;
}

button,
.btn {
    background     : var(--accent);
    border         : 0.125rem solid var(--accent);
    border-radius  : 2rem;
    color          : var(--text-secondary);
    display        : inline-block;
    font-family    : "Hubot Sans", sans-serif;
    font-weight    : 500;
    letter-spacing : 0.125rem;
    max-height     : 4rem;
    min-height     : 4rem;
    padding        : 1.25rem 2.5rem;
    text-transform : uppercase;
    transition     : all 0.4s ease-in-out;
}


button:hover,
.btn:hover {
    background   : var(--primary);
    border-color : var(--accent);
    color        : var(--accent);
}

button,
.btn,
.btn:hover,
nav ul li {

    -webkit-touch-callout : none;
    -moz-user-select      : none;
    -ms-user-select       : none;
    -webkit-user-select   : none;
    user-select           : none;
}

header {
    display      : inline-block;
    padding-left : 6.25rem;
    position     : relative;
    top          : 15%;
}

header h1 {
    color          : var(--text);
    font-family    : "Hubot Sans", sans-serif;
    font-size      : 6vw;
    font-weight    : 700;
    line-height    : 1;
    text-transform : inherit;
    width          : 70%;
}

header span {
    color : var(--accent);
}

header p {
    color         : var(--text);
    margin-bottom : 1.5rem;
    margin-top    : 1.5625rem;
    width         : 55%;
}

header p a {
    color : var(--accent);
}

.card-box {
    display         : flex;
    /*
    The flex-wrap property is used to define whether flex items are forced onto one line or can wrap onto multiple lines.
    The wrap value is used to allow the items to wrap onto multiple lines.
    */
    flex-wrap       : wrap;
    /*
    The justify-content property is used to align flex items along the main axis of the current line of the flex container.
    The space-between value is used to display the items with equal spacing between them.
    */
    justify-content : space-between;
    margin-top      : 1.75rem;
    padding         : 0 5.25rem;
}


.card {
    background    : var(--tertiary);
    border-radius : 1em;
    box-shadow    : 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom : 2rem;
    margin-left   : auto;
    margin-right  : auto;
    max-height    : fit-content;
    max-width     : 23em;
    min-height    : 38.5em;
    padding       : 1.25rem 1.25rem 0;
}


.card p {
    color         : var(--text-secondary);
    margin-bottom : 2.5rem;
    text-align    : center;
    width         : 100%;
}

.card h2 {
    color      : var(--text-secondary);
    text-align : center;
    width      : 100%;
}

.card img {
    aspect-ratio  : 1/1;
    border-radius : 1em;
    /*
    The display property is used to define the type of box an element generates.
    The block value is used to display the element as a block box.
    */
    display       : block;
    height        : 60%;
    margin-bottom : 2rem;
    margin-left   : auto;
    margin-right  : auto;
    max-width     : fit-content;
    /*We use the object-fit property to make sure the image is scaled to fit the container.*/
    object-fit    : cover;
    width         : 100%;
}

/* The input class is used for the text-box input in a form */
input {
    border        : none;
    border-bottom : 0.125rem solid var(--text-secondary);
    border-radius : 0.5rem;
    color         : var(--text-secondary);
    display       : block;
    margin-bottom : 1.25rem;
    outline       : none;
    padding       : 0.5rem;
    text-align    : center;
    width         : 100%;
}

footer {
    background : var(--primary);
    bottom     : 0;
    height     : 4rem;
    position   : relative;
    width      : 100%;
}

footer p {
    color      : var(--text);
    display    : block;
    margin-top : 1.25rem;
    text-align : center;
}

footer p a {
    color : var(--text);
}

footer p a:hover {
    color : var(--accent);
}

footer p a:active {
    color : var(--accent);
}

/*
The media query below is used to change the layout of the website when the screen size is less than 800px.
This helps to make the website more responsive and easier to use on mobile devices.
*/
@media only screen and (max-width : 800px) {

    nav ul li a {
        color     : var(--text);
        font-size : 1.125rem;
    }

    nav ul li a:hover {
        color : var(--accent);
    }

    nav ul li a:hover:after {
        background-color : var(--accent);
    }

    header {
        padding-left : 0;
    }

    header h1 {
        font-size : 4.5rem;
    }

    header p {
        font-size : 1.25rem;
    }

    /* I removed the logo and nav buttons on mobile, as they took up valuable screen space without adding much value */
    .logo,
    nav .btn {
        display : none;
    }

    nav,
    nav ul {
        background-color : var(--accent);
    }

    nav ul li a {
        color : var(--text-secondary);
    }

    nav ul li a.active {
        color : var(--text-secondary);
    }

    /*
    Mobile browsers still implement the hover pseudo-class
    Instead of on hover though, it is triggered when the element is tapped
    This is not the desired behaviour, so I override it here
    */
    nav ul li a:hover {
        color : var(--text-secondary);
    }

    /*
    As mobile doesn't properly support hover events, I was able to reuse the after pseudo-element to create a line under the active nav button.
    This marks the current page the user is on.
    */
    nav ul li a.active::after {
        background-color : var(--text-secondary);
        bottom           : 0;
        content          : "";
        display          : block;
        height           : 0.125rem;
        position         : relative;
        width            : 100%;
    }

    /*
    As mobile screens are rather small, I want to align my text to the center.
    Otherwise it looks like the page doesn't render properly.
    */
    nav ul {
        text-align : center;
    }

    nav ul,
    header {
        display        : flex;
        /*
        The flex-direction property is used to define the direction of the main axis of the flex container.
        The column value is used to stack the items vertically.
        */
        flex-direction : column;
        position       : relative;
        width          : 100%;
    }

    .card-box {
        margin  : 0;
        padding : 0;
    }

    header {
        align-items  : center;
        padding-left : 0;
        padding-top  : 2rem;
        text-align   : center;
        top          : 0;
    }

    header h1 {
        font-size : 6vw;
    }

    footer {
        padding : 0.5rem;
    }

    .btn:hover,
    button:hover {
        background   : var(--accent);
        border-color : var(--primary);
        color        : var(--primary);
    }
}
